<?xml version="1.0" encoding="UTF-8"?>
<issues format="4" by="lint 24.4">

    <issue
        id="NamespaceTypo"
        severity="Fatal"
        message="Suspicious namespace: should start with `http://`"
        category="Correctness"
        priority="8"
        summary="Misspelled namespace declaration"
        explanation="Accidental misspellings in namespace declarations can lead to some very obscure error messages. This check looks for potential misspellings to help track these down."
        errorLine1="    xmlns:app=&quot;com.yalantis.taurus.PullToRefreshView&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\layout\exam_score_layout.xml"
            line="3"
            column="5"/>
    </issue>

    <issue
        id="NamespaceTypo"
        severity="Fatal"
        message="Suspicious namespace: should start with `http://`"
        category="Correctness"
        priority="8"
        summary="Misspelled namespace declaration"
        explanation="Accidental misspellings in namespace declarations can lead to some very obscure error messages. This check looks for potential misspellings to help track these down."
        errorLine1="    xmlns:app=&quot;com.yalantis.phoenix.PullToRefreshView&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\layout\news_fragment.xml"
            line="3"
            column="5"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`instapager_login_html`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;instapager_login_html&quot; formatted=&quot;false&quot;>&lt;![CDATA["
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\instapaper_strings.xml"
            line="4"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`cancel`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;cancel&quot;>取消&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\oks_strings.xml"
            line="3"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`finish`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;finish&quot;>完成&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\oks_strings.xml"
            line="4"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`sharing`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;sharing&quot;>分享操作正在后台进行…&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\oks_strings.xml"
            line="5"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`share_to`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;share_to&quot;>分享到&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\oks_strings.xml"
            line="6"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`share`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;share&quot;>分享&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\oks_strings.xml"
            line="7"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`multi_share`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;multi_share&quot;>图文分享&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\oks_strings.xml"
            line="8"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`share_completed`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;share_completed&quot;>分享成功&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\oks_strings.xml"
            line="9"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`share_canceled`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;share_canceled&quot;>分享已取消&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\oks_strings.xml"
            line="10"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`select_one_plat_at_least`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;select_one_plat_at_least&quot;>请选择一个目标平台&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\oks_strings.xml"
            line="11"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`list_friends`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;list_friends&quot;>%s的朋友&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\oks_strings.xml"
            line="12"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`share_failed`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;share_failed&quot;>分享失败&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\oks_strings.xml"
            line="13"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`pull_to_refresh`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;pull_to_refresh&quot;>下拉刷新&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\oks_strings.xml"
            line="14"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`release_to_refresh`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;release_to_refresh&quot;>松开刷新&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\oks_strings.xml"
            line="15"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`refreshing`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;refreshing&quot;>刷新中…&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\oks_strings.xml"
            line="16"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`shake2share`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;shake2share&quot;>摇晃手机！&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\oks_strings.xml"
            line="17"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`select_a_friend`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;select_a_friend&quot;>请选择一个朋友&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\oks_strings.xml"
            line="18"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`pushmsg_center_no_more_msg`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;pushmsg_center_no_more_msg&quot;>已经到底啦&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\pull_refresh_strings.xml"
            line="4"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`pushmsg_center_pull_up_text`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;pushmsg_center_pull_up_text&quot;>松开加载更多&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\pull_refresh_strings.xml"
            line="5"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`pushmsg_center_pull_down_text`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;pushmsg_center_pull_down_text&quot;>下拉可以刷新&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\pull_refresh_strings.xml"
            line="6"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`pushmsg_center_pull_release_text`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;pushmsg_center_pull_release_text&quot;>松开获取更多&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\pull_refresh_strings.xml"
            line="7"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`pushmsg_center_pull_down_update_time`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;pushmsg_center_pull_down_update_time&quot;>上次刷新时间 : &lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\pull_refresh_strings.xml"
            line="8"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`pushmsg_center_load_more_ongoing_text`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;pushmsg_center_load_more_ongoing_text&quot;>正在加载中&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\pull_refresh_strings.xml"
            line="9"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`xsearch_loading`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;xsearch_loading&quot;>正在刷新…&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\pull_refresh_strings.xml"
            line="10"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`picture_load_image_failed`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;picture_load_image_failed&quot;>点击屏幕，重新加载&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\pull_refresh_strings.xml"
            line="13"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`picture_image_loading`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;picture_image_loading&quot;>正在加载…&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\pull_refresh_strings.xml"
            line="15"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`pull_to_refresh_header_hint_normal`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;pull_to_refresh_header_hint_normal&quot;>@string/pushmsg_center_pull_down_text&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\pull_refresh_strings.xml"
            line="18"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`pull_to_refresh_header_hint_normal2`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;pull_to_refresh_header_hint_normal2&quot;>上拉可以刷新&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\pull_refresh_strings.xml"
            line="19"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`pull_to_refresh_header_hint_ready`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;pull_to_refresh_header_hint_ready&quot;>松开后刷新&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\pull_refresh_strings.xml"
            line="20"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`pull_to_refresh_header_hint_loading`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;pull_to_refresh_header_hint_loading&quot;>@string/pushmsg_center_load_more_ongoing_text&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\pull_refresh_strings.xml"
            line="21"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`pull_to_refresh_header_last_time`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;pull_to_refresh_header_last_time&quot;>@string/pushmsg_center_pull_down_update_time&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\pull_refresh_strings.xml"
            line="22"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`pull_to_refresh_footer_hint_ready`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;pull_to_refresh_footer_hint_ready&quot;>松开载入更多&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\pull_refresh_strings.xml"
            line="23"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`pull_to_refresh_refreshing_label`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;pull_to_refresh_refreshing_label&quot;>@string/pull_to_refresh_header_hint_loading&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\pull_refresh_strings.xml"
            line="24"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`pull_to_refresh_no_more_data`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;pull_to_refresh_no_more_data&quot;>@string/pushmsg_center_no_more_msg&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\pull_refresh_strings.xml"
            line="25"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`pull_to_refresh_network_error`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;pull_to_refresh_network_error&quot;>网络不给力，请检查网络&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\pull_refresh_strings.xml"
            line="26"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`picture_save_succeed`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;picture_save_succeed&quot;>图片已保存到相册&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\pull_refresh_strings.xml"
            line="29"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`picture_save_fail`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;picture_save_fail&quot;>保存图片失败&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\pull_refresh_strings.xml"
            line="30"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`picture_next_album`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;picture_next_album&quot;>下一组：&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\pull_refresh_strings.xml"
            line="31"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`picture_previous_album`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;picture_previous_album&quot;>上一组：&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\pull_refresh_strings.xml"
            line="32"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`weibo_oauth_regiseter`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;weibo_oauth_regiseter&quot;>应用授权&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="3"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`website`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;website&quot;>http://www.mob.com&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="4"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`weibo_upload_content`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;weibo_upload_content&quot;>分享图片&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="5"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`wechat_client_inavailable`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;wechat_client_inavailable&quot;>目前您的微信版本过低或未安装微信，需要安装微信才能使用&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="6"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`google_plus_client_inavailable`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;google_plus_client_inavailable&quot;>Google+ 版本过低或者没有安装，需要升级或安装Google+才能使用！&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="7"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`qq_client_inavailable`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;qq_client_inavailable&quot;>QQ 版本过低或者没有安装，需要升级或安装QQ才能使用！&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="8"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`pinterest_client_inavailable`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;pinterest_client_inavailable&quot;>Pinterest版本过低或者没有安装，需要升级或安装Pinterest才能使用！&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="9"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`instagram_client_inavailable`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;instagram_client_inavailable&quot;>Instagram版本过低或者没有安装，需要升级或安装Instagram才能使用！&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="10"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`yixin_client_inavailable`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;yixin_client_inavailable&quot;>目前您的易信版本过低或未安装，需要安装易信才能使用&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="11"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`line_client_inavailable`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;line_client_inavailable&quot;>目前您的Line版本过低或未安装，需要安装Line才能使用&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="12"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`kakaotalk_client_inavailable`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;kakaotalk_client_inavailable&quot;>目前您的KakaoTalk版本过低或未安装，需要安装KakaoTalk才能使用&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="13"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`kakaostory_client_inavailable`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;kakaostory_client_inavailable&quot;>目前您的KakaoStory版本过低或未安装，需要安装KakaoStory才能使用&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="14"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`whatsapp_client_inavailable`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;whatsapp_client_inavailable&quot;>目前您的WhatsApp版本过低或未安装，需要安装WhatsApp才能使用&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="15"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`baidutieba_client_inavailable`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;baidutieba_client_inavailable&quot;>目前您的百度贴吧版本过低或未安装，需要安装百度贴吧才能使用&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="16"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`laiwang_client_inavailable`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;laiwang_client_inavailable&quot;>目前您的来往版本过低或未安装，需要安装来往才能使用&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="17"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`sinaweibo`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;sinaweibo&quot;>新浪微博&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="19"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`tencentweibo`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;tencentweibo&quot;>腾讯微博&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="20"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`qzone`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;qzone&quot;>QQ空间&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="21"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`wechat`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;wechat&quot;>微信好友&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="22"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`wechatmoments`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;wechatmoments&quot;>微信朋友圈&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="23"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`wechatfavorite`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;wechatfavorite&quot;>微信收藏&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="24"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`facebook`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;facebook&quot;>Facebook&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="25"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`twitter`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;twitter&quot;>Twitter&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="26"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`renren`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;renren&quot;>人人网&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="27"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`kaixin`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;kaixin&quot;>开心网&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="28"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`email`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;email&quot;>邮件&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="29"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`shortmessage`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;shortmessage&quot;>信息&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="30"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`sohumicroblog`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;sohumicroblog&quot;>搜狐微博&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="31"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`sohusuishenkan`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;sohusuishenkan&quot;>搜狐随身看&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="32"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`neteasemicroblog`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;neteasemicroblog&quot;>网易微博&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="33"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`douban`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;douban&quot;>豆瓣&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="34"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`youdao`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;youdao&quot;>有道云笔记&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="35"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`evernote`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;evernote&quot;>印象笔记&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="36"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`linkedin`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;linkedin&quot;>领英&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="37"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`googleplus`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;googleplus&quot;>Google+&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="38"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`foursquare`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;foursquare&quot;>FourSquare&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="39"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`qq`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;qq&quot;>QQ&lt;/string>"
        errorLine2="         ~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="40"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`pinterest`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;pinterest&quot;>Pinterest&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="41"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`flickr`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;flickr&quot;>Flickr&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="42"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`tumblr`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;tumblr&quot;>Tumblr&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="43"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`dropbox`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;dropbox&quot;>Dropbox&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="44"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`vkontakte`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;vkontakte&quot;>VK&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="45"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`instagram`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;instagram&quot;>Instagram&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="46"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`yixin`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;yixin&quot;>易信&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="47"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`yixinmoments`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;yixinmoments&quot;>易信朋友圈&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="48"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`mingdao`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;mingdao&quot;>明道&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="49"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`kakaotalk`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;kakaotalk&quot;>KakaoTalk&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="50"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`kakaostory`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;kakaostory&quot;>KakaoStory&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="51"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`line`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;line&quot;>Line&lt;/string>"
        errorLine2="         ~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="52"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`bluetooth`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;bluetooth&quot;>蓝牙&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="53"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`whatsapp`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;whatsapp&quot;>WhatsApp&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="54"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`pocket`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;pocket&quot;>Pocket&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="55"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`instapaper`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;instapaper&quot;>Instapaper&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="56"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`instapaper_email`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;instapaper_email&quot;>邮箱&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="57"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`instapaper_pwd`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;instapaper_pwd&quot;>密码&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="58"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`instapaper_login`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;instapaper_login&quot;>登录&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="59"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`instapaper_logining`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;instapaper_logining&quot;>登录中…&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="60"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`instapager_email_or_password_incorrect`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;instapager_email_or_password_incorrect&quot;>Email或密码不正确&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="61"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`facebookmessenger`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;facebookmessenger&quot;>Facebook Messenger&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="62"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`baidutieba`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;baidutieba&quot;>百度贴吧&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="63"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`laiwang`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;laiwang&quot;>来往&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="64"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`laiwangmoments`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;laiwangmoments&quot;>来往动态&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="65"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`share_to_baidutieba`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;share_to_baidutieba&quot;>分享到百度贴吧&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="67"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`share_to_qzone`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;share_to_qzone&quot;>分享到QQ空间&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="68"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`share_to_qq`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;share_to_qq&quot;>分享到QQ&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="69"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`mingdao_share_content`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;mingdao_share_content&quot;>网页分享&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="70"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`share_to_mingdao`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;share_to_mingdao&quot;>分享到明道&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="71"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`share_to_qzone_default`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;share_to_qzone_default&quot;>来自%s的分享&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="72"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`use_login_button`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;use_login_button&quot;>请改用“登录”按钮&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\ssdk_strings.xml"
            line="73"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`app_name`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;app_name&quot;>i 软院&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\strings.xml"
            line="4"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`drop_down_list_header_default_text`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;drop_down_list_header_default_text&quot;>Click to refresh&amp;#8230;&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\strings.xml"
            line="6"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`drop_down_list_header_pull_text`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;drop_down_list_header_pull_text&quot;>Drop Down to refresh&amp;#8230;&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\strings.xml"
            line="7"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`drop_down_list_header_release_text`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;drop_down_list_header_release_text&quot;>Release to refresh&amp;#8230;&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\strings.xml"
            line="8"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`drop_down_list_header_loading_text`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;drop_down_list_header_loading_text&quot;>加载中&amp;#8230;&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\strings.xml"
            line="9"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`drop_down_list_footer_default_text`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;drop_down_list_footer_default_text&quot;>&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\strings.xml"
            line="10"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`drop_down_list_footer_loading_text`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;drop_down_list_footer_loading_text&quot;>加载中&amp;#8230;&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\strings.xml"
            line="11"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`drop_down_list_footer_no_more_text`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;drop_down_list_footer_no_more_text&quot;>无更多信息&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\strings.xml"
            line="12"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`welcome_tips`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string-array name=&quot;welcome_tips&quot;>"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\strings.xml"
            line="14"
            column="19"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`cantOpen`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;cantOpen&quot;>Can\&apos;t open this application&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\strings.xml"
            line="22"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`settings`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;settings&quot;>Settings&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\strings.xml"
            line="23"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`mode`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;mode&quot;>Swipe Mode&lt;/string>"
        errorLine2="            ~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\strings.xml"
            line="24"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`left`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;left&quot;>Left&lt;/string>"
        errorLine2="            ~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\strings.xml"
            line="25"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`right`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;right&quot;>Right&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\strings.xml"
            line="26"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`both`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;both&quot;>Both&lt;/string>"
        errorLine2="            ~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\strings.xml"
            line="27"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`leftAction`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;leftAction&quot;>Left Action&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\strings.xml"
            line="28"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`reveal`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;reveal&quot;>Reveal&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\strings.xml"
            line="29"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`dismiss`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;dismiss&quot;>Dismiss&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\strings.xml"
            line="30"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`choice`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;choice&quot;>Choice&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\strings.xml"
            line="31"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`rightAction`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;rightAction&quot;>Right Action&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\strings.xml"
            line="32"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`rightOffset`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;rightOffset&quot;>Right Offset (%1$s dp)&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\strings.xml"
            line="33"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`leftOffset`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;leftOffset&quot;>Left Offset (%1$s dp)&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\strings.xml"
            line="34"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`dp`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;dp&quot;>dp&lt;/string>"
        errorLine2="            ~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\strings.xml"
            line="35"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`animationTime`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;animationTime&quot;>Animation Time (Default: 0)&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\strings.xml"
            line="36"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`milliseconds`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;milliseconds&quot;>Milliseconds&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\strings.xml"
            line="37"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`openOnLongPress`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;openOnLongPress&quot;>Open On Long Press&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\strings.xml"
            line="38"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`about`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;about&quot;>About&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\strings.xml"
            line="40"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`aboutMessage`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;aboutMessage&quot;>This is just a simple demo for the Open Source SwipeListView Android Library by 47 Degrees. Find all source, documentation and packaged downloads at GitHub. Cheers!&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\strings.xml"
            line="41"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`ok`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ok&quot;>Ok&lt;/string>"
        errorLine2="            ~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\strings.xml"
            line="42"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`visit47`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;visit47&quot;>Visit 47deg&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\strings.xml"
            line="44"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`goToGitHub`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;goToGitHub&quot;>Go to GitHub&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\strings.xml"
            line="45"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`dontShow`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;dontShow&quot;>Don\&apos;t show this message again&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\strings.xml"
            line="47"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`others`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;others&quot;>Others&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\strings.xml"
            line="48"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`loading`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;loading&quot;>Loading&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\strings.xml"
            line="50"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`newTag`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;newTag&quot;>New!&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\strings.xml"
            line="52"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`discard`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;discard&quot;>Discard&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\strings.xml"
            line="53"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`tb_munion_tip_download_prefix`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;tb_munion_tip_download_prefix&quot;>正在下载:&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\tb_munion_strings.xml"
            line="5"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_common_action_info_exist`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;umeng_common_action_info_exist&quot;>The app is already in downloading list.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_common_strings.xml"
            line="3"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_common_info_interrupt`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;umeng_common_info_interrupt&quot;>dowload interrupted.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_common_strings.xml"
            line="4"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_common_action_pause`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;umeng_common_action_pause&quot;>Pause&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_common_strings.xml"
            line="5"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_common_action_continue`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;umeng_common_action_continue&quot;>Continue&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_common_strings.xml"
            line="6"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_common_action_cancel`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;umeng_common_action_cancel&quot;>Cancel&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_common_strings.xml"
            line="7"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_common_download_notification_prefix`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;umeng_common_download_notification_prefix&quot;>Downloading: &lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_common_strings.xml"
            line="8"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_common_pause_notification_prefix`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;umeng_common_pause_notification_prefix&quot;>Pause: &lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_common_strings.xml"
            line="9"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_common_start_download_notification`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;umeng_common_start_download_notification&quot;>Download start.&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_common_strings.xml"
            line="10"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_common_start_patch_notification`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;umeng_common_start_patch_notification&quot;>Patch start.&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_common_strings.xml"
            line="11"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_common_network_break_alert`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;umeng_common_network_break_alert&quot;>Please make sure you are connected to internet, download failed&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_common_strings.xml"
            line="12"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_common_download_failed`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;umeng_common_download_failed&quot;>Download Failed! &lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_common_strings.xml"
            line="13"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_common_download_finish`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;umeng_common_download_finish&quot;>Download finished,click to install it.&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_common_strings.xml"
            line="14"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_common_patch_finish`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;umeng_common_patch_finish&quot;>Patch finished,click to install it.&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_common_strings.xml"
            line="15"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_common_silent_download_finish`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;umeng_common_silent_download_finish&quot;>New version is ready,click to install it.&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_common_strings.xml"
            line="16"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_common_icon`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;umeng_common_icon&quot;>icon&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_common_strings.xml"
            line="17"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_fb_contact_info_hint`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;umeng_fb_contact_info_hint&quot;>Email, MSN, Gtalk, or whatever we can find you.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_fb_strings.xml"
            line="3"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_fb_back`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;umeng_fb_back&quot;>Back&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_fb_strings.xml"
            line="4"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_fb_title`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;umeng_fb_title&quot;>Feedback&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_fb_strings.xml"
            line="5"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_fb_write_contact_title`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;umeng_fb_write_contact_title&quot;>Write contact Info&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_fb_strings.xml"
            line="6"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_fb_change_contact_title`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;umeng_fb_change_contact_title&quot;>Change contact Info&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_fb_strings.xml"
            line="7"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_fb_contact_info`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;umeng_fb_contact_info&quot;>Contact Info&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_fb_strings.xml"
            line="8"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_fb_send`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;umeng_fb_send&quot;>Send&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_fb_strings.xml"
            line="9"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_fb_reply_content_default`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;umeng_fb_reply_content_default&quot;>Your precious feedback are appriciated.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_fb_strings.xml"
            line="10"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_fb_notification_ticker_text`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;umeng_fb_notification_ticker_text&quot;>Got new reply&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_fb_strings.xml"
            line="11"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_fb_notification_content_formatter_single_msg`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;umeng_fb_notification_content_formatter_single_msg&quot;>New reply: %s&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_fb_strings.xml"
            line="12"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_fb_notification_content_formatter_multiple_msg`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;umeng_fb_notification_content_formatter_multiple_msg&quot;>You received %d new replies from the app developer.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_fb_strings.xml"
            line="13"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_fb_feedback`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;umeng_fb_feedback&quot;>Feedback&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_fb_strings.xml"
            line="14"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_fb_contact_save`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;umeng_fb_contact_save&quot;>Save&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_fb_strings.xml"
            line="15"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_fb_time_right_now`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;umeng_fb_time_right_now&quot;>Just now&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_fb_strings.xml"
            line="16"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_fb_time_minutes_ago`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;umeng_fb_time_minutes_ago&quot;>%d minutes ago&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_fb_strings.xml"
            line="17"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_fb_time_this_year_format`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;umeng_fb_time_this_year_format&quot;>MM/dd HH:mm:ss&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_fb_strings.xml"
            line="18"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_fb_time_pre_year_format`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;umeng_fb_time_pre_year_format&quot;>yy/MM/dd HH:mm:ss&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_fb_strings.xml"
            line="19"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_fb_contact_qq`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;umeng_fb_contact_qq&quot;>QQ&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_fb_strings.xml"
            line="20"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_fb_contact_email`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;umeng_fb_contact_email&quot;>Email&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_fb_strings.xml"
            line="21"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_fb_contact_phone`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;umeng_fb_contact_phone&quot;>Phone&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_fb_strings.xml"
            line="22"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_fb_contact_other`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;umeng_fb_contact_other&quot;>Other&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_fb_strings.xml"
            line="23"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_fb_send_fail`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;umeng_fb_send_fail&quot;>Send fail&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_fb_strings.xml"
            line="24"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_fb_sending`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;umeng_fb_sending&quot;>Sending&amp;#8230;&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_fb_strings.xml"
            line="25"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_fb_contact_key_qq`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;umeng_fb_contact_key_qq&quot;>qq&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_fb_strings.xml"
            line="26"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_fb_contact_key_email`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;umeng_fb_contact_key_email&quot;>email&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_fb_strings.xml"
            line="27"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_fb_contact_key_phone`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;umeng_fb_contact_key_phone&quot;>phone&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_fb_strings.xml"
            line="28"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_fb_contact_key_other`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;umeng_fb_contact_key_other&quot;>plain&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_fb_strings.xml"
            line="29"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_fb_press_speech`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;umeng_fb_press_speech&quot;>Hold to Talk&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_fb_strings.xml"
            line="31"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_fb_release_send`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;umeng_fb_release_send&quot;>Release to Send&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_fb_strings.xml"
            line="32"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_fb_release_cancel`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;umeng_fb_release_cancel&quot;>Release to cancel&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_fb_strings.xml"
            line="33"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_fb_slide_up_cancel`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;umeng_fb_slide_up_cancel&quot;>Slide up to cancel&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_fb_strings.xml"
            line="34"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_fb_record_time_short`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;umeng_fb_record_time_short&quot;>Message too short&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_fb_strings.xml"
            line="35"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_fb_count_down`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;umeng_fb_count_down&quot;>Count down&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_fb_strings.xml"
            line="36"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_fb_record_fail`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;umeng_fb_record_fail&quot;>Record fail&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_fb_strings.xml"
            line="37"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_fb_no_record_permission`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;umeng_fb_no_record_permission&quot;>No permission of record&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_fb_strings.xml"
            line="38"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_fb_please_select_picture`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;umeng_fb_please_select_picture&quot;>Please select a picture&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_fb_strings.xml"
            line="39"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_fb_questions_question`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;umeng_fb_questions_question&quot;>Q:&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_fb_strings.xml"
            line="41"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_fb_questions_anwser`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;umeng_fb_questions_anwser&quot;>A:&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_fb_strings.xml"
            line="42"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`umeng_fb_tabs_title`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string-array name=&quot;umeng_fb_tabs_title&quot;>"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_fb_strings.xml"
            line="58"
            column="19"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`UMBreak_Network`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;UMBreak_Network&quot;>Please make sure you are connected to internet,update failed&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_update_string.xml"
            line="4"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`UMUpdateTitle`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;UMUpdateTitle&quot;>New version found&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_update_string.xml"
            line="5"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`UMNewVersion`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;UMNewVersion&quot;>Latest version: &lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_update_string.xml"
            line="6"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`UMUpdateContent`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;UMUpdateContent&quot;>Update Content&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_update_string.xml"
            line="7"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`UMUpdateSize`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;UMUpdateSize&quot;>Update size: &lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_update_string.xml"
            line="8"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`UMTargetSize`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;UMTargetSize&quot;>Target size: &lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_update_string.xml"
            line="9"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`UMGprsCondition`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;UMGprsCondition&quot;>(Warning: Not WIFI Condition)&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_update_string.xml"
            line="10"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`UMUpdateNow`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;UMUpdateNow&quot;>Update now&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_update_string.xml"
            line="11"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`UMAppUpdate`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;UMAppUpdate&quot;>App updating&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_update_string.xml"
            line="12"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`UMNotNow`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;UMNotNow&quot;>Not now&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_update_string.xml"
            line="13"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`UMIgnore`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;UMIgnore&quot;>Ingore this&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_update_string.xml"
            line="14"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`UMToast_IsUpdating`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;UMToast_IsUpdating&quot;>Updating....&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_update_string.xml"
            line="15"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`UMDialog_InstallAPK`&quot; is not translated in &quot;en&quot; (English)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;UMDialog_InstallAPK&quot;>The lastest version has been downloaded, install now ?&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_update_string.xml"
            line="16"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`UMUpdateCheck`&quot; is not translated in &quot;en&quot; (English), &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;UMUpdateCheck&quot;>2.6.0.1.20150312&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\DeveloperTools\Code\Android\Yard\SoftwareYard\res\values\umeng_update_string.xml"
            line="17"
            column="10"/>
    </issue>

</issues>
